#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { promisify } = require('util')
const yargs = require('yargs')
const extractor = require('radspec/dist/extract')

const applyInlineBindings = (notice, argumentNames) => {
  const radspecSeparator = '`'

  const bind = (token) =>
    argumentNames.reduce((acc, name, i) =>
      acc.replace(new RegExp(name, 'g'), `$${i + 1}`) // replace argument name N with $N
    , token)

  return notice
    .split(radspecSeparator)
    .map((token, i) => i % 2 === 0 ? token : bind(token))
    .join(radspecSeparator)
}

const exec = async ({ inputs, output }) => {
  const extracted = await Promise.all(inputs.map(extractor))

  const functions = extracted
    .reduce((acc, fns) => [...acc, ...fns], []) // flatten
    .filter(({ notice }) => notice) // filter out empty strings
    .map(({ sig, notice, argumentNames }) => ({ sig, notice: applyInlineBindings(notice, argumentNames) }))
    .reduce((acc, { sig, notice }) => ({ ...acc, [sig]: notice }), {}) // proccess

  const db = require(output)
  const newDb = { ...db, ...functions } // new values override

  fs.writeFileSync(output, JSON.stringify(newDb, 0, 2))

  console.log(`Saved ${Object.keys(functions).length} functions to ${output}`)
}

exec(
  yargs
    .usage('Usage: $0')
    .option('inputs', {
      alias: 'i',
      require: true,
      describe: 'Input path to databases directory',
      array: true
    })
    .option('output', {
      alias: 'o',
      default: path.resolve(__dirname, '../data/radspec/db.json'),
      describe: 'Output path to radspec db file',
      type: 'string',
    })
    .argv
  )
  .catch(err => {
    console.error(err)
    process.exit(1)
  })