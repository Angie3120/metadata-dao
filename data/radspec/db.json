{
  "setOwner(address)": "Set `$1` as the new owner",
  "setOwner(bytes32,address)": "Set `$2` as the new owner of the `$1` node",
  "payday()": "To withdraw payment by employee (the caller). The amount owed since last call will be transferred.",
  "initialize(address,address)": "Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions",
  "newAppInstance(bytes32,address)": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`",
  "newAppInstance(bytes32,address,bytes,bool)": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
  "newPinnedAppInstance(bytes32,address)": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.",
  "newPinnedAppInstance(bytes32,address,bytes,bool)": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
  "setApp(bytes32,bytes32,address)": "Set the resolving address of `_appId` in namespace `_namespace` to `_app`",
  "initialize()": "Initialize Vault app",
  "newVersion(uint16[3],address,bytes)": "Create new version for repo",
  "initialize(address)": "Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions",
  "newRepo(string,address)": "Create new repo in registry with `_name`",
  "newRepoWithVersion(string,address,uint16[3],address,bytes)": "Create new repo in registry with `_name` and first repo version",
  "addScriptExecutor(address)": "Add a new script executor with address `_executor` to the registry",
  "disableScriptExecutor(uint256)": "Disable script executor with ID `_executorId`",
  "enableScriptExecutor(uint256)": "Enable script executor with ID `_executorId`",
  "execScript(bytes,bytes,address[])": "Executes a number of call scripts",
  "createPermission(address,address,bytes32,address)": "Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager",
  "grantPermission(address,address,bytes32)": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
  "grantPermissionP(address,address,bytes32,uint256[])": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
  "revokePermission(address,address,bytes32)": "Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`",
  "setPermissionManager(address,address,bytes32)": "Set `_newManager` as the manager of `_role` in `_app`",
  "removePermissionManager(address,bytes32)": "Remove the manager of `_role` in `_app`",
  "createBurnedPermission(address,bytes32)": "Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
  "burnPermissionManager(address,bytes32)": "Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
  "initialize(address,uint64,uint64,uint64)": "Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`",
  "changeSupportRequiredPct(uint64)": "Change required support to `@formatPct(_supportRequiredPct)`%",
  "changeMinAcceptQuorumPct(uint64)": "Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%",
  "newVote(bytes,string)": "Create a new vote about \"`_metadata`\"",
  "newVote(bytes,string,bool,bool)": "Create a new vote about \"`_metadata`\"",
  "vote(uint256,bool,bool)": "Vote `_supports ? 'yea' : 'nay'` in vote #`_voteId`",
  "executeVote(uint256)": "Execute vote #`_voteId`",
  "forward(bytes)": "Execute the script as the Agent app",
  "fallback": "Deposit ETH to the Vault, to avoid locking them in this Finance app forever",
  "initialize(address,uint64)": "Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`",
  "deposit(address,uint256,string)": "Deposit `@tokenAmount(_token, _amount)`",
  "newPayment(address,address,uint256,uint64,uint64,uint64,string)": "Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver``_maxRepeats > 0 ? ', executing ' + _maxRepeats + ' times at intervals of ' + @transformTime(_interval) : ''`",
  "setPeriodDuration(uint64)": "Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period",
  "setBudget(address,uint256)": "Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately",
  "removeBudget(address)": "Remove spending limit for `_token.symbol(): string`, effective immediately",
  "executePayment(uint256)": "Execute pending payment #`_paymentId`",
  "receiverExecutePayment(uint256)": "Execute pending payment #`_paymentId`",
  "setPaymentStatus(uint256,bool)": "`_active ? 'Activate' : 'Disable'` payment #`_paymentId`",
  "recoverToVault(address)": "Send tokens held in this contract to the Vault",
  "tryTransitionAccountingPeriod(uint64)": "Transition accounting period if needed",
  "deposit(address,uint256)": "Deposit `_value` `_token` to the vault",
  "transfer(address,address,uint256)": "Transfer `_value` `_token` from the Vault to `_to`",
  "initialize(address,bool,uint256)": "Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`",
  "mint(address,uint256)": "Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`",
  "issue(uint256)": "Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager",
  "assign(address,uint256)": "Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings",
  "burn(address,uint256)": "Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`",
  "assignVested(address,uint256,uint64,uint64,uint64,bool)": "Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)",
  "revokeVesting(address,uint256)": "Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager",
  "proxyPayment(address)": "Called when ether is sent to the MiniMe Token contract",
  "execute(address,uint256,bytes)": "Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending' + @tokenAmount(_ethValue, 0x00) + ')'`",
  "setDesignatedSigner(address)": "Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app",
  "presignHash(bytes32)": "Pre-sign hash `_hash`",
  "initialize(address,address,address,uint64)": "Initialize Payroll app for `_finance`. Set ETH and Denomination tokens",
  "setPriceFeed(address)": "Sets the Price Feed for exchange rates to `_feed`.",
  "setRateExpiryTime(uint64)": "Sets the exchange rate expiry time to `_time`.",
  "addAllowedToken(address)": "Add `_allowedToken` to the set of allowed tokens",
  "addEmployee(address,uint256)": "Add employee with address `accountAddress` to Payroll with a salary of `initialDenominationSalary` per second.",
  "addEmployeeWithName(address,uint256,string)": "Add employee `name` with address `accountAddress` to Payroll with a salary of `initialDenominationSalary` per second.",
  "addEmployeeWithNameAndStartDate(address,uint256,string,uint64)": "Add employee `name` with address `accountAddress` to Payroll with a salary of `initialDenominationSalary` per second, starting on `startDate`.",
  "setEmployeeSalary(uint128,uint256)": "Set employee #`employeeId` annual salary to `denominationSalary` per second.",
  "terminateEmployeeNow(uint128)": "Terminate employee #`employeeId` from Payroll",
  "terminateEmployee(uint128,uint64)": "Terminate employee #`employeeId` from Payroll",
  "addAccruedValue(uint128,uint256)": "Adds `amount` to accrued value for employee with id `employeeId`",
  "escapeHatch()": "Allows to send ETH from this contract to Finance, to avoid locking them in contract forever.",
  "depositToFinance(address)": "Allows to send tokens from this contract to Finance, to avoid locked tokens in contract forever",
  "determineAllocation(address[],uint8[])": "Set token distribution for payments to an employee (the caller).",
  "changeAddressByEmployee(address)": "Change employee account address to `newAddress`"
}